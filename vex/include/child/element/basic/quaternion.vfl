
#ifndef __QUATERNION_VFL__
#define __QUATERNION_VFL__

#include <quaternion.vfl>



function
vector4 unitq(
    ) {
    return {0,0,0,1};
}




function
vector4 qdivide(
    const vector4 q1, q2;
    ) {
    return qmultiply(qinvert(q2), q1);
}






function
vector4 slerp(
    const vector4 q2;
    const float bias;
    ) {
    int iter = rint(bias);
    if (abs(bias - iter) < 1e-05) {
        vector4 result = {0,0,0,1};
        for (int i = abs(iter); i > 0; --i){
            result = qmultiply(q2, result);
        }
        if (bias < 0) {
            return qinvert(result);
        } else {
            return result;
        }
    } else {
        return slerp({0,0,0,1}, q2, bias);
    }
}



function
vector4 qlerp(
    const vector4 q1, q2;
    const float bias1, bias2;
    ) {
    return qmultiply(slerp(q2, bias2)), slerp(q1, bias1));
}

function
vector4 qlerp(
    const vector4 q1, q2;
    const float bias;
    ) {
    return qlerp(q1, q2, 1-bias, bias);
}
/*
function
vector4 slerpdebug(
    const vector4 q1, q2;
    const float bias;
    ) {
    int iter = rint(bias);
    if (abs(bias - iter) < 1e-05) {
        vector4 result = {0,0,0,1};
        for (int i = abs(iter); i > 0; --i){
            result = qmultiply(, result)
        }
        return result;
    } else {
        return slerp(q1, q2, bias);
    }
}
*/




















#endif





/*

function
vector4 qinvert(
    const vector4 q;
    ) {
    return set(-q.x, -q.y, -q.z, q.w);
}


*/

