
#ifndef __NEIGHBOURS_VFL__
#define __NEIGHBOURS_VFL__

#include <neighbours.vfl>



#include <arraydeep.vfl>
#include <group.vfl>
#include <promotedeep.vfl>










function
int[] polylineneighbours(
    int geo;
    int primnum;
    ) {
    int nebs[], primpoints[] = primpoints(geo, primnum);
    foreach (int primpoint; primpoints){
        int pointprims[] = pointprims(geo, primpoint);
        removevalue(pointprims, primnum);
        uniquepush(nebs, pointprims);
    }
    return nebs;
}

/*
function
int[] polylineneighbours(
    int geo;
    string groupname;
    int primnum;
    ) {
    int nebs[] = polylineneighbours(geo, primnum);
    foreach (int neb; nebs){
        if (inprimgroup(geo, groupname, neb)) {
            
        }
    }
    return nebs;
}
*/



function
int[] polyedgeneighbours(
    int geo;
    int primnum;
    ) {
    int result[];
    int start = primhedge(geo, primnum);
    int hedge = start;
    int flag;
    while ( hedge != -1 ) {
        flag = 1;
        for (int nh = hedge_nextequiv(geo, hedge); nh != hedge; nh = hedge_nextequiv(geo, nh)) {
            int prim = hedge_prim(geo, nh);
            if (prim != -1 && prim != primnum) {
                push(result, prim);
                flag = 0;
            }
        }
        if ( flag ) {
            push(result, -1);
        }
        hedge = hedge_next(geo, hedge);
        if (hedge == start) break;
    }
    return result;
}


function
int[] neighbours(
    const int geo;
    const int ptnums[];
    ) {
    int nebs[];
    foreach (int ptnum; ptnums) {
        push(nebs, neighbours(geo, ptnum));
    }
    removevalue(nebs, ptnums);
    return nebs;
}

function
int[] neighbours(
    const int geo;
    const string groupname;
    const int ptnum;
    ) {
    int nebs[] = neighbours(geo, ptnum);
    int ingroup[] = inpointgroup(geo, groupname, nebs);
    int notingroupindices[] = find(ingroup, 0);
    removeindex(nebs, notingroupindices);
    return nebs;
}

function
int[] neighbours(
    const int geo;
    const string groupname;
    const int ptnums[];
    ) {
    int nebs[];
    foreach (int ptnum; ptnums)
        push(nebs, neighbours(geo, groupname, ptnum));
    removevalue(nebs, ptnums);
    return nebs;
}

function
int[] neighbours(
    const int geo;
    const int ptnum;
    export float dist[];
    ) {
    int nebs[] = neighbours(geo, ptnum);
    resize(dist, len(nebs));
    vector pos = point(geo, "P", ptnum);
    foreach (int idx; int neb; nebs)
        dist[idx] = distance(pos, point(geo, "P", neb));
    return nebs;
}

function
int[] neighbours(
    const int geo;
    const string groupname;
    const int ptnum;
    export float dist[];
    ) {
    int nebs[] = neighbours(geo, groupname, ptnum);
    resize(dist, len(nebs));
    vector pos = point(geo, "P", ptnum);
    foreach (int idx; int neb; nebs)
        dist[idx] = distance(pos, point(geo, "P", neb));
    return nebs;
}





function
int[] neighbourssortdist(
    const int geo;
    const int ptnum;
    ) {
    float dist[];
    int nebs[] = neighbours(geo, ptnum, dist);
    int arg[] = argsort(dist);
    return reorder(nebs, arg);
}

function
int[] neighbourssortdist(
    const int geo;
    const string groupname;
    const int ptnum;
    ) {
    float dist[];
    int nebs[] = neighbours(geo, groupname, ptnum, dist);
    int arg[] = argsort(dist);
    return reorder(nebs, arg);
}


function
int[] neighbourssortdist(
    const int geo;
    const int ptnum;
    export float dist[];
    ) {
    int nebs[] = neighbours(geo, ptnum, dist);
    int arg[] = argsort(dist);
    dist = reorder(dist, arg);
    return reorder(nebs, arg);
}

function
int[] neighbourssortdist(
    const int geo;
    const string groupname;
    const int ptnum;
    export float dist[];
    ) {
    int nebs[] = neighbours(geo, groupname, ptnum, dist);
    int arg[] = argsort(dist);
    dist = reorder(dist, arg);
    return reorder(nebs, arg);
}








function
int[] neighboursdebug(
    const int geo;
    const int ptnum;
    ) {
    int result[] = neighbours(geo, ptnum);
    result = removenebrepeat(sort(result));
    removevalue(result, ptnum);
    return result;
}





function
int nextpoint(
    const int geo;
    const int primnum;
    const int ptnum;
    ) {
    int vtxpnum = pointprimindex(geo, primnum, ptnum);
    int numpt = primvertexcount(geo, primnum);
    if (vtxpnum == -1) {
        return -numpt-1;
    } else if (vtxpnum == numpt-1) {
        return -1;
    }
    return vertexpoint(geo, vertexindex(geo, primnum, vtxpnum + 1));
}

function
int[] nextpoints(
    int geo;
    int primnums[];
    int ptnum;
    ) {
    int result[];
    foreach (int primnum; primnums){
        push(result, nextpoint(geo, primnum, ptnum));
    }
    return result;
}

function
int nextpoint(
    int geo;
    int ptnum;
    ) {
    return nextpoint(geo, pointprims(geo, ptnum)[0], ptnum);
}

function
int[] nextpoints(
    int geo;
    int ptnum;
    ) {
    return nextpoints(geo, pointprims(geo, ptnum), ptnum);
}







function
int prevpoint(
    int geo;
    int primnum;
    int ptnum;
    ) {
    int vtxpnum = pointprimindex(geo, primnum, ptnum);
    int numpt = primvertexcount(geo, primnum);
    if (vtxpnum == -1) {
        return -numpt-1;
    } else if (vtxpnum == 0) {
        return -1;
    }
    return vertexpoint(geo, vertexindex(geo, primnum, vtxpnum - 1));
}

function
int[] prevpoints(
    int geo;
    int primnums[];
    int ptnum;
    ) {
    int result[];
    foreach (int primnum; primnums){
        push(result, prevpoint(geo, primnum, ptnum));
    }
    return result;
}

function
int prevpoint(
    int geo;
    int ptnum;
    ) {
    return prevpoint(geo, pointprims(geo, ptnum)[0], ptnum);
}

function
int[] prevpoints(
    int geo;
    int ptnum;
    ) {
    return prevpoints(geo, pointprims(geo, ptnum), ptnum);
}










#endif
