<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="FeE HDA Manger" label="FeE HDA Manger">
    <memberTool name="convertHDA_to_Subnet_publish"/>
    <memberTool name="convertFeE HDA_to_Subnet_publish"/>
    <memberTool name="unlock_FeE_HDA_publish"/>
    <memberTool name="unlock_HDA_publish"/>
    <memberTool name="HideFeENode"/>
    <memberTool name="extractAllUsedDefiToEmbeded"/>
    <memberTool name="findRefNode"/>
    <memberTool name="Correct Wrangle Parmeter"/>
  </toolshelf>

  <tool name="convertHDA_to_Subnet_publish" label="convertHDA to Subnet" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_HDA

# from importlib import reload
# reload(fee_HDA)

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    fee_HDA.convert_All_HDA_to_Subnet(node, ignoreUnlock = False, ignore_SideFX_HDA = True)
]]></script>
  </tool>

  <tool name="convertFeE HDA_to_Subnet_publish" label="convert FeE HDA to Subnet" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_HDA

# from importlib import reload
# reload(fee_HDA)

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    fee_HDA.convert_All_FeENode_to_Subnet(node, ignoreUnlock = False, ignore_SideFX_HDA = True)

]]></script>
  </tool>

  <tool name="unlock_FeE_HDA_publish" label="Unlock FeE HDA" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_HDA

# from importlib import reload
# reload(fee_HDA)

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    fee_HDA.unlock_All_FeENode(node, detectName = True, detectPath = False)


]]></script>
  </tool>

  <tool name="unlock_HDA_publish" label="Unlock HDA" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_HDA

# from importlib import reload
# reload(fee_HDA)

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    fee_HDA.unlock_All_HDA(node, detectName = True, detectPath = False)

]]></script>
  </tool>

  <tool name="HideFeENode" label="Hide FeE Node" icon="SOP_visibility">
    <script scriptType="python"><![CDATA[
import hou
import os

import fee_HDA
from importlib import reload
reload(fee_HDA)

#fee_HDA.checkHideFeENode(keepHide = True, detectName = False, detectPath = True)

fee_HDA.checkHideFeENode(keepHide = False, detectName = False, detectPath = True)
]]></script>
  </tool>

  <tool name="findRefNode" label="Find Ref Node" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def isRef(str, base_node, node):
    path = base_node.path()
    if ( path in str ):
        return True
    path = node.relativePathTo(base_node)
    if ( path in str ):
        return True
    return False
    


selectedNodes = hou.selectedNodes()
if selectedNodes:
    print()
    print()
    print()


for selectedNode in selectedNodes:
    refTimes = 0
    nodeTypeName = selectedNode.type().name()
    print('Referenced Node Name:', end='')
    print(nodeTypeName)
    for subNode in hou.node('/obj').allSubChildren(top_down=True, recurse_in_locked_nodes=False):
        for parm in subNode.parms():
            val = parm.rawValue()
            if isRef(val, selectedNode, subNode):
                print(parm)
                refTimes += 1
                break
                continue
            val = parm.evalAsString()
            if isRef(val, selectedNode, subNode):
                print(parm)
                refTimes += 1
                break
                continue
                
    print('This Node has been Referenced Times: ', end='')
    print(refTimes)

]]></script>
  </tool>

  <tool name="Correct Wrangle Parmeter" label="Correct Wrangle Parmeter" icon="SOP_attribwrangle">
    <script scriptType="python"><![CDATA[
import re

import fee_HDA

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    nodeType = node.type()
    nodeTypeName = nodeType.name()
    if nodeTypeName != 'attribwrangle':
        continue
    
    snippet = node.evalParm('snippet')
    
    vex_inplace = node.parm('vex_inplace')
    vex_inplace.set(True)
    for substr in ('attrib(0,', 'prim(0,', 'point(0,', 'vertex(0,', 'detail(0,'):
        if substr in snippet:
            vex_inplace.set(False)
            break
    
    #print(usedAttribNames)
    
    if node.evalParm('autobind')==1 or node.evalParm('groupautobind')==1:
        node.parm('autobind').set(False)
        node.parm('groupautobind').set(False)
        usedAttribNames = []
        pattern = re.compile(r'@[a-zA-Z0-9]*')
        usedAttribNames = pattern.findall(snippet)
        usedAttribNames = list(set(usedAttribNames))

        for idx in range(len(usedAttribNames)):
            usedAttribNames[idx] = usedAttribNames[idx][1:]
        
        for topStr in ('elemnum', 'ptnum', 'primnum', 'vtxnum', 'numelem', 'numprim', 'numpt', 'numvtx'):
            if topStr in usedAttribNames:
                usedAttribNames.remove(topStr)

        for topStr in ('color', 'Alpha', 'Cd', 'N', 'P'):
            if topStr not in usedAttribNames:
                continue
            usedAttribNames.remove(topStr)
            usedAttribNames.insert(0, topStr)
            

        node.parm('bindings').set(len(usedAttribNames))
        for idx in range(len(usedAttribNames)):
            stridx = str(idx+1)
            node.parm('bindname' + stridx).set(usedAttribNames[idx])
            node.parm('bindparm' + stridx).set(usedAttribNames[idx])


]]></script>
  </tool>

  <tool name="extractAllUsedDefiToEmbeded" label="Extract All Used Defi To Embeded" icon="hicon:/SVGIcons.index?MISC_digital_asset.svg">
    <script scriptType="python"><![CDATA[
import hou
import os

import fee_HDA
from importlib import reload
reload(fee_HDA)


ignoreNodeTypeNames = (
'',

)

fee_HDA.extractAllUsedDefiToEmbeded(ignoreNodeTypeNames = ignoreNodeTypeNames)



'''
theTool = hou.shelves.runningTool()
if theTool.icon().count("hicon:/SVGIcons.index?NODEFLAGS_hardlock.svg")==0:
    theTool.setIcon("hicon:/SVGIcons.index?NODEFLAGS_hardlock.svg")
    
if theTool.label().count("Create BlackBoxAsset")==0:
    theTool.setLabel("Create BlackBoxAsset")
    
if theTool.name().count("Create_BlackBox")==0:
    theTool.setName("Create_BlackBox")
'''
]]></script>
  </tool>
</shelfDocument>
