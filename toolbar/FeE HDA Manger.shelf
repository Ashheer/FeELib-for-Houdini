<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="FeE HDA Manger" label="FeE HDA Manger">
    <memberTool name="convertHDA_to_Subnet_publish"/>
    <memberTool name="convertFeE HDA_to_Subnet_publish"/>
    <memberTool name="unlock_FeE_HDA_publish"/>
    <memberTool name="unlock_HDA_publish"/>
    <memberTool name="extractAllUsedDefiToEmbeded"/>
    <memberTool name="findRefNode"/>
    <memberTool name="recoverNodesFromSubnet"/>
  </toolshelf>

  <tool name="convertHDA_to_Subnet_publish" label="convertHDA to Subnet" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_Node

# from importlib import reload
# reload(fee_Node)

selectedNodes = hou.selectedNodes()
fee_Node.convert_All_HDA_to_Subnet(selectedNodes, ignoreUnlock = False, ignore_SideFX_HDA = True, displayConfirmation = True)
]]></script>
  </tool>

  <tool name="convertFeE HDA_to_Subnet_publish" label="convert FeE HDA to Subnet" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_Node
from importlib import reload
reload(fee_Node)

selectedNodes = hou.selectedNodes()
fee_Node.convert_All_FeENode_to_Subnet(selectedNodes, ignoreUnlock = True, ignore_SideFX_HDA = True, detectName = True, detectPath = False, displayConfirmation = True)
]]></script>
  </tool>

  <tool name="unlock_FeE_HDA_publish" label="Unlock FeE HDA" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_Node

# from importlib import reload
# reload(fee_Node)

selectedNodes = hou.selectedNodes()
fee_Node.unlock_All_FeENode(selectedNodes, detectName = True, detectPath = False, displayConfirmation = True)
]]></script>
  </tool>

  <tool name="unlock_HDA_publish" label="Unlock HDA" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_Node

# from importlib import reload
# reload(fee_Node)

selectedNodes = hou.selectedNodes()
fee_Node.unlock_All_HDA(selectedNodes, detectName = True, detectPath = False, displayConfirmation = True)

]]></script>
  </tool>

  <tool name="findRefNode" label="Find Ref Node" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def isRef(str, base_node, node):
    path = base_node.path()
    if ( path in str ):
        return True
    path = node.relativePathTo(base_node)
    if ( path in str ):
        return True
    return False

selectedNodes = hou.selectedNodes()
if selectedNodes:
    print()
    print()

for selectedNode in selectedNodes:
    refTimes = 0
    nodeTypeName = selectedNode.type().name()
    print('Referenced Node Name:', end='')
    print(nodeTypeName)
    for subNode in hou.node('/obj').allSubChildren(top_down=True, recurse_in_locked_nodes=False):
        for parm in subNode.parms():
            val = parm.rawValue()
            if isRef(val, selectedNode, subNode):
                print(parm)
                refTimes += 1
                break
                continue
            val = parm.evalAsString()
            if isRef(val, selectedNode, subNode):
                print(parm)
                refTimes += 1
                break
                continue
                
    print('This Node has been Referenced Times: ', end='')
    print(refTimes)

]]></script>
  </tool>

  <tool name="extractAllUsedDefiToEmbeded" label="Extract All Used HDA To Embeded" icon="hicon:/SVGIcons.index?MISC_digital_asset.svg">
    <script scriptType="python"><![CDATA[
import hou
import os

import fee_HDA
# from importlib import reload
# reload(fee_HDA)


ignoreNodeTypeNames = (
'',

)

fee_HDA.extractAllUsedDefiToEmbeded(ignoreNodeTypeNames = ignoreNodeTypeNames, ignoreFeEHDA = False)



'''
theTool = hou.shelves.runningTool()
if theTool.icon().count("hicon:/SVGIcons.index?NODEFLAGS_hardlock.svg")==0:
    theTool.setIcon("hicon:/SVGIcons.index?NODEFLAGS_hardlock.svg")
    
if theTool.label().count("Create BlackBoxAsset")==0:
    theTool.setLabel("Create BlackBoxAsset")
    
if theTool.name().count("Create_BlackBox")==0:
    theTool.setName("Create_BlackBox")
'''
]]></script>
  </tool>

  <tool name="recoverNodesFromSubnet" label="Recover Nodes from Subnet" icon="hicon:/SVGIcons.index?VOP_structpack.svg">
    <script scriptType="python"><![CDATA[
import fee_Node
# from importlib import reload
# reload(fee_Node)

selectedNodes = hou.selectedNodes()
fee_Node.recoverNodesFromSubnet(selectedNodes, ignoreUnlock = False, Only_FeEHDA = False, ignore_SideFX_HDA = True, detectName = True, detectPath = False, displayConfirmation = True)

#print(fee_Node.isEqual_networkChildren(hou.node('/obj/geo1/subnet3/geolayout_fee1'), hou.node('/obj/geo1/subnet3/geolayout_fee2'), checkNodeType = False))
]]></script>
  </tool>
</shelfDocument>
