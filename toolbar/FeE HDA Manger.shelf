<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="FeE HDA Manger" label="FeE HDA Manger">
    <memberTool name="convertHDA_to_Subnet_publish"/>
    <memberTool name="convertFeE HDA_to_Subnet_publish"/>
    <memberTool name="unlock_FeE_HDA_publish"/>
    <memberTool name="unlock_HDA_publish"/>
    <memberTool name="HideFeENode"/>
    <memberTool name="convert_usedDefi_to_BalckBox"/>
    <memberTool name="open$HIP"/>
    <memberTool name="open$TEMP"/>
    <memberTool name="git pull"/>
    <memberTool name="Correct Wrangle Parmeter"/>
  </toolshelf>

  <tool name="convertHDA_to_Subnet_publish" label="convertHDA to Subnet" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_HDA

# from importlib import reload
# reload(fee_HDA)

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    fee_HDA.convert_All_HDA_to_Subnet(node, ignoreUnlock = False, ignore_SideFX_HDA = True)
]]></script>
  </tool>

  <tool name="convertFeE HDA_to_Subnet_publish" label="convert FeE HDA to Subnet" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_HDA

# from importlib import reload
# reload(fee_HDA)

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    fee_HDA.convert_All_FeENode_to_Subnet(node, ignoreUnlock = False, ignore_SideFX_HDA = True)

]]></script>
  </tool>

  <tool name="unlock_FeE_HDA_publish" label="Unlock FeE HDA" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_HDA

# from importlib import reload
# reload(fee_HDA)

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    fee_HDA.unlock_All_FeENode(node, detectName = True, detectPath = False)


]]></script>
  </tool>

  <tool name="unlock_HDA_publish" label="Unlock HDA" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import fee_HDA

# from importlib import reload
# reload(fee_HDA)

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    fee_HDA.unlock_All_HDA(node, detectName = True, detectPath = False)

]]></script>
  </tool>

  <tool name="HideFeENode" label="Hide FeE Node" icon="SOP_visibility">
    <script scriptType="python"><![CDATA[
import hou
import os

import fee_HDA
from importlib import reload
reload(fee_HDA)

#fee_HDA.checkHideFeENode(keepHide = True, detectName = False, detectPath = True)

fee_HDA.checkHideFeENode(keepHide = False, detectName = False, detectPath = True)
]]></script>
  </tool>

  <tool name="convert_usedDefi_to_BalckBox" label="Convert Used Definition to Balck Box" icon="hicon:/SVGIcons.index?VOP_structunpack.svg">
    <script scriptType="python"><![CDATA[
import hou
import os

import fee_HDA

# from importlib import reload
# reload(fee_HDA)

'''
theTool = hou.shelves.runningTool()
if theTool.icon().count("hicon:/SVGIcons.index?NODEFLAGS_hardlock.svg")==0:
    theTool.setIcon("hicon:/SVGIcons.index?NODEFLAGS_hardlock.svg")
    
if theTool.label().count("Create BlackBoxAsset")==0:
    theTool.setLabel("Create BlackBoxAsset")
    
if theTool.name().count("Create_BlackBox")==0:
    theTool.setName("Create_BlackBox")
'''

ignoreNodeTypeNames = (
'csr_rbd_bullet_solver.hda',
'csr_PyroSolverSop.hda',
'csr_materialbuilder.hda',
'csr_dir_displacement_shader.hda',

)

# hou.ui.displayMessage('å»ºè®®åå¦å­ä¸çHip')
buttons = ("ç¡®è®¤", "åæ¶")
checkInput = hou.ui.readInput(r'ç¡®è®¤è¦è¿è¡è½¬black boxå', buttons = buttons, close_choice = 1)

if checkInput[0] == 0:
    BlackBoxMode = hou.ui.displayMessage(text='è¯·éæ©æåé»ççæ¨¡å¼\n(æ´åæ¨¡å¼ä¼å°ææHDAå­æ¾è¿ä¸ä¸ª.hdaæä»¶)',buttons=('ç¬ç«','æ´å'))

    HIPPath = hou.hipFile.path()
    save_OTLFolderPath = os.path.split(HIPPath)[0] + '/otls/'
        
    #print(save_OTLFolderPath)
    #print(os.listdir(save_OTLFolderPath))
    for subDir in os.listdir(save_OTLFolderPath):
        subFullDir = save_OTLFolderPath + subDir
        if not os.path.isfile(subFullDir):
            continue
        #print(os.path.splitext(subDir))
        if os.path.splitext(subDir)[1].lower() != '.hda':
            continue
        try:
            hou.hda.uninstallFile(subFullDir)
        except:
            pass
        os.remove(subFullDir)

    save_OTLPath = save_OTLFolderPath + '/blackBox.hda'

    if not os.path.exists(save_OTLFolderPath):
        os.makedirs(save_OTLFolderPath)
    
    convertedDefi = []
    if BlackBoxMode == 0:
        newHDAFilePaths = []
    else:
        newHDAFilePaths = [save_OTLPath]

    selectedNodes = hou.selectedNodes()
    for selectedNode in selectedNodes:
        for allSubChild in selectedNode.allSubChildren():
            if not allSubChild.matchesCurrentDefinition():
                continue
            nodeType = allSubChild.type()
            defi = nodeType.definition()
            if defi is None:
                continue
            if defi in convertedDefi:
                continue
            if fee_HDA.isSideFXDefinition(defi):
                continue
            nodeTypeName = allSubChild.type().name()
            if nodeTypeName in ignoreNodeTypeNames:
                continue

            if BlackBoxMode == 0:
                defiPath = defi.libraryFilePath()
                save_OTLPath = save_OTLFolderPath + '/' + os.path.split(defiPath)[1]

            allSubChild.allowEditingOfContents(propagate=True)
            if 1:
                defi.save(save_OTLPath, template_node = allSubChild, compile_contents=True, black_box=True, create_backup=False)
            else:
                defi.save(save_OTLPath, compile_contents=False, black_box=True, create_backup=False)
                
            convertedDefi.append(defi)
            
            if BlackBoxMode == 0 and save_OTLPath not in newHDAFilePaths:
                newHDAFilePaths.append(save_OTLPath)

    for newHDAFilePath in newHDAFilePaths:
        hou.hda.installFile(newHDAFilePath)

    #hou.hda.uninstallFile(defiPath)
    #convertedDefi = list(set(convertedDefi)) #å»é
]]></script>
  </tool>

  <tool name="open$HIP" label="Open $HIP" icon="hicon:/SVGIcons.index?DESKTOP_application.svg">
    <script scriptType="python"><![CDATA[
import os

start_directory = hou.getenv('HIP')
os.startfile(start_directory)
]]></script>
  </tool>

  <tool name="open$TEMP" label="Open $TEMP" icon="hicon:/SVGIcons.index?DESKTOP_application.svg">
    <script scriptType="python"><![CDATA[
import os

start_directory = hou.getenv('TEMP')
os.startfile(start_directory)
]]></script>
  </tool>

  <tool name="git pull" label="Git Pull" icon="SHELF_download_engine_plugin">
    <script scriptType="python"><![CDATA[
import fee_Utils
# from importlib import reload
# reload(fee_Utils)

FeELib_path = hou.getenv('FeELib')
fee_Utils.gitPullByBat(FeELib_path, reloadAllFiles = True)
]]></script>
  </tool>

  <tool name="Correct Wrangle Parmeter" label="Correct Wrangle Parmeter" icon="SOP_attribwrangle">
    <script scriptType="python"><![CDATA[
import re

import fee_HDA

selectedNodes = hou.selectedNodes()
for node in selectedNodes:
    nodeType = node.type()
    nodeTypeName = nodeType.name()
    if nodeTypeName != 'attribwrangle':
        continue
    
    snippet = node.evalParm('snippet')
    
    vex_inplace = node.parm('vex_inplace')
    vex_inplace.set(True)
    for substr in ('attrib(0,', 'prim(0,', 'point(0,', 'vertex(0,', 'detail(0,'):
        if substr in snippet:
            vex_inplace.set(False)
            break
    
    #print(usedAttribNames)
    
    if node.evalParm('autobind')==1 or node.evalParm('groupautobind')==1:
        node.parm('autobind').set(False)
        node.parm('groupautobind').set(False)
        usedAttribNames = []
        pattern = re.compile(r'@[a-zA-Z0-9]*')
        usedAttribNames = pattern.findall(snippet)
        usedAttribNames = list(set(usedAttribNames))

        for idx in range(len(usedAttribNames)):
            usedAttribNames[idx] = usedAttribNames[idx][1:]
        
        for topStr in ('elemnum', 'ptnum', 'primnum', 'vtxnum', 'numelem', 'numprim', 'numpt', 'numvtx'):
            if topStr in usedAttribNames:
                usedAttribNames.remove(topStr)

        for topStr in ('color', 'Alpha', 'Cd', 'N', 'P'):
            if topStr not in usedAttribNames:
                continue
            usedAttribNames.remove(topStr)
            usedAttribNames.insert(0, topStr)
            

        node.parm('bindings').set(len(usedAttribNames))
        for idx in range(len(usedAttribNames)):
            stridx = str(idx+1)
            node.parm('bindname' + stridx).set(usedAttribNames[idx])
            node.parm('bindparm' + stridx).set(usedAttribNames[idx])


]]></script>
  </tool>
</shelfDocument>
