<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="fee" label="FeE">
    <memberTool name="create new output node"/>
    <memberTool name="multisolver_nodes_script"/>
    <memberTool name="gassubstep_nodes_script"/>
    <memberTool name="compNode"/>
    <memberTool name="selectsamenodes"/>
    <memberTool name="filecache"/>
    <memberTool name="extract lock nodes"/>
    <memberTool name="refresh all file SOP"/>
    <memberTool name="is locked HDA"/>
    <memberTool name="lock all hda"/>
    <memberTool name="unlock all HDA"/>
    <memberTool name="lock all hda0"/>
    <memberTool name="lock select hda"/>
    <memberTool name="editable node"/>
    <memberTool name="MMD_bridge"/>
    <memberTool name="tool_1"/>
    <memberTool name="extract_all_sub"/>
    <memberTool name="tool_3"/>
    <memberTool name="updatemode"/>
    <memberTool name="setdesktop_to_169_tech"/>
    <memberTool name="tool_4"/>
  </toolshelf>

  <tool name="create new output node" label="create new output node" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for node in hou.selectedNodes():
    OUTNode = node.createOutputNode('output', 'OUT_' + node.parent().name())

    numOUTNodes = -1
    for child in node.parent().children():
        if child.type() == OUTNode.type():
            numOUTNodes += 1
    OUTNode.setParms({"outputidx": numOUTNodes})

    # æä½Ctrlé®ç¹å»
    if not kwargs["ctrlclick"]:
        OUTNode.setName("OUT%d" % (numOUTNodes + 1))

    pos = node.position()
    OUTNode.setPosition([pos[0], pos[1] - 1])
    OUTNode.setColor(hou.Color((1, 0, 1)))

    if node.isDisplayFlagSet() == 1:
        OUTNode.setDisplayFlag(1)
    if node.isRenderFlagSet() == 1:
        OUTNode.setRenderFlag(1)
]]></script>
  </tool>

  <tool name="compNode" label="compNode" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
from compNodes import gui
gui.main()
]]></script>
  </tool>

  <tool name="multisolver_nodes_script" label="multisolver1 Nodes Script" icon="MISC_generic">
    <toolMenuContext name="network">
      <contextOpType>Dop/multisolver</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('sopsolver::2.0'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_Head_subnet1_dopnet1_multisolver1 (Dop/multisolver)
set _obj_Head_subnet1_dopnet1_multisolver1 = `run("opadd -e -n -v multisolver multisolver1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_Head_subnet1_dopnet1_multisolver1
opcolor -c 1 1 1 $_obj_Head_subnet1_dopnet1_multisolver1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Head_subnet1_dopnet1_multisolver1
opexprlanguage -s hscript $_obj_Head_subnet1_dopnet1_multisolver1
opset -p on $_obj_Head_subnet1_dopnet1_multisolver1
opcf $arg1

# Node $_obj_Head_subnet1_dopnet1_emptyobject1 (Dop/emptyobject)
set _obj_Head_subnet1_dopnet1_emptyobject1 = `run("opadd -e -n -v emptyobject emptyobject1")`
oplocate -x `$arg2 + -1.2012500286102294` -y `$arg3 + 2.0031000239308923` $_obj_Head_subnet1_dopnet1_emptyobject1
chblockbegin
chadd -t 0 0 $_obj_Head_subnet1_dopnet1_emptyobject1 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$ST == 0' $_obj_Head_subnet1_dopnet1_emptyobject1/activation
chblockend
opparm -V 16.5.438 $_obj_Head_subnet1_dopnet1_emptyobject1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Head_subnet1_dopnet1_emptyobject1
opexprlanguage -s hscript $_obj_Head_subnet1_dopnet1_emptyobject1
opset -p on $_obj_Head_subnet1_dopnet1_emptyobject1
opcf $arg1

# Node $_obj_Head_subnet1_dopnet1_sopgeo1 (Dop/sopgeo)
set _obj_Head_subnet1_dopnet1_sopgeo1 = `run("opadd -e -n -v sopgeo sopgeo1")`
oplocate -x `$arg2 + -1.2` -y `$arg3 + 1.0000000119209289` $_obj_Head_subnet1_dopnet1_sopgeo1
opparm $_obj_Head_subnet1_dopnet1_sopgeo1  numstamps ( 0 )
chblockbegin
chadd -t 0 0 $_obj_Head_subnet1_dopnet1_sopgeo1 time
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$T' $_obj_Head_subnet1_dopnet1_sopgeo1/time
chadd -t 0 0 $_obj_Head_subnet1_dopnet1_sopgeo1 transformtime
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$T' $_obj_Head_subnet1_dopnet1_sopgeo1/transformtime
chadd -t 0 0 $_obj_Head_subnet1_dopnet1_sopgeo1 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_Head_subnet1_dopnet1_sopgeo1/activation
chblockend
opparm -V 16.5.438 $_obj_Head_subnet1_dopnet1_sopgeo1 soppath ( '`dopcontextgeo(".", 0)`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Head_subnet1_dopnet1_sopgeo1
opexprlanguage -s hscript $_obj_Head_subnet1_dopnet1_sopgeo1
opset -p on $_obj_Head_subnet1_dopnet1_sopgeo1
opcf $arg1

# Node $_obj_Head_subnet1_dopnet1_sopsolver1 (Dop/sopsolver::2.0)
set _obj_Head_subnet1_dopnet1_sopsolver1 = `run("opadd -e -n -v sopsolver::2.0 sopsolver1")`
oplocate -x `$arg2 + 1.2571000576019287` -y `$arg3 + 1.0000000119209289` $_obj_Head_subnet1_dopnet1_sopsolver1
opparm $_obj_Head_subnet1_dopnet1_sopsolver1  numinputs ( 0 )
opparm -V 16.5.438 $_obj_Head_subnet1_dopnet1_sopsolver1 uniquedataname ( on )
opcolor -c 1 1 1 $_obj_Head_subnet1_dopnet1_sopsolver1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Head_subnet1_dopnet1_sopsolver1
opexprlanguage -s hscript $_obj_Head_subnet1_dopnet1_sopsolver1
opcf $_obj_Head_subnet1_dopnet1_sopsolver1

# Node $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry (Sop/dopimport)
set _obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry = `run("opadd -e -n -v dopimport dop_geometry")`
oplocate -x `$arg2 + 3.6318600000000001` -y `$arg3 + -1.8995500000000001` $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry
chblockbegin
chadd -t 0 0 $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry doposxform
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../transformsopoutput")' $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry/doposxform
chadd -t 0 0 $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry doxform
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../transformsopoutput")' $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry/doxform
chadd -t 0 0 $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry integrateovertime
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '1/$FPS' $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry/integrateovertime
chblockend
opparm -V 16.5.438 $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry doppath ( '`stamps("..", "DOPNET", "../..")`' ) objpattern ( '`stamps("..", "OBJID", arg(dopnodeobjs(".."),0))`' ) importstyle ( fetch ) geodatapath ( '`stamps("..", "DATANAME", chs("../datapath"))`' ) doposxform ( doposxform ) doxform ( doxform ) adddopobjectname ( off ) pointvels ( none ) donotsim ( on )
opcolor -c 0.60000002384185791 0.40000000596046448 1 $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry
opexprlanguage -s hscript $_obj_Head_subnet1_dopnet1_sopsolver1_dop_geometry

# Node $_obj_Head_subnet1_dopnet1_sopsolver1_impacts (Sop/dopimportrecords)
set _obj_Head_subnet1_dopnet1_sopsolver1_impacts = `run("opadd -e -n -v dopimportrecords impacts")`
oplocate -x `$arg2 + 6.3931899999999997` -y `$arg3 + -1.8601000000000001` $_obj_Head_subnet1_dopnet1_sopsolver1_impacts
opparm -V 16.5.438 $_obj_Head_subnet1_dopnet1_sopsolver1_impacts doppath ( '`stamps("..", "DOPNET", "../..")`' ) objpattern ( '`stamps("..", "OBJID", arg(dopnodeobjs(".."),0))`' ) datapath ( Impacts ) record ( Impacts )
opcolor -c 0.60000002384185791 0.40000000596046448 1 $_obj_Head_subnet1_dopnet1_sopsolver1_impacts
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Head_subnet1_dopnet1_sopsolver1_impacts
opexprlanguage -s hscript $_obj_Head_subnet1_dopnet1_sopsolver1_impacts

# Node $_obj_Head_subnet1_dopnet1_sopsolver1_feedbacks (Sop/dopimportrecords)
set _obj_Head_subnet1_dopnet1_sopsolver1_feedbacks = `run("opadd -e -n -v dopimportrecords feedbacks")`
oplocate -x `$arg2 + 8.6226900000000004` -y `$arg3 + -1.9601299999999999` $_obj_Head_subnet1_dopnet1_sopsolver1_feedbacks
opparm -V 16.5.438 $_obj_Head_subnet1_dopnet1_sopsolver1_feedbacks doppath ( '`stamps("..", "DOPNET", "../..")`' ) objpattern ( '`stamps("..", "OBJID", arg(dopnodeobjs(".."),0))`' ) datapath ( Feedback ) record ( Impacts )
opcolor -c 0.60000002384185791 0.40000000596046448 1 $_obj_Head_subnet1_dopnet1_sopsolver1_feedbacks
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Head_subnet1_dopnet1_sopsolver1_feedbacks
opexprlanguage -s hscript $_obj_Head_subnet1_dopnet1_sopsolver1_feedbacks

# Node $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry (Sop/object_merge)
set _obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry = `run("opadd -e -n -v object_merge relationship_geometry")`
oplocate -x `$arg2 + 11.0848` -y `$arg3 + -1.89367` $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry
opspareds '    group {         name    "folder0"         label   "Object Merge"          parm {             name    "xformtype"             baseparm             label   "Transform"             export  none         }         parm {             name    "xformpath"             baseparm             label   "Transform Object"             export  none         }         parm {             name    "invertxform"             baseparm             label   "Invert Transform"             export  none         }         parm {             name    "createptgroups"             baseparm             label   "Create Point Groups"             export  none         }         parm {             name    "ptgroupprefix"             baseparm             label   "Point Group Prefix"             export  none         }         parm {             name    "createprimgroups"             baseparm             label   "Create Primitive Groups"             export  none         }         parm {             name    "primgroupprefix"             baseparm             label   "Primitive Group Prefix"             export  none         }         parm {             name    "verbosegroups"             baseparm             label   "Verbose Group Names"             export  none         }         parm {             name    "createptstring"             baseparm             label   "Create Per-Point Path"             export  none         }         parm {             name    "createprimstring"             baseparm             label   "Create Per-Primitive Path"             export  none         }         parm {             name    "pathattrib"             baseparm             label   "Path Attribute"             export  none         }         parm {             name    "pack"             baseparm             label   "Pack Geometry Before Merging"             export  none         }         parm {             name    "pivot"             baseparm             label   "Pivot Location"             export  none         }         parm {             name    "viewportlod"             baseparm             label   "Display As"             export  none         }         parm {             name    "addpath"             baseparm             label   "Add Path Attribute"             export  none         }         parm {             name    "_separator"             baseparm             label   ""             export  none         }         multiparm {             name    "numobj"             label    "Number of Objects"             baseparm             default 1              parm {                 name    "enable#"                 baseparm                 label   "Enable Merge #"                 export  none             }             parm {                 name    "objpath#"                 baseparm                 label   "Object #"                 export  none             }             parm {                 name    "group#"                 baseparm                 label   "Group #"                 export  none             }             parm {                 name    "expand#"                 baseparm                 label   "Expand Group #"                 export  none             }         }      }      group {         name    "folder0_1"         label   "Custom Parameters"          parm {             name    "relnode"             label   "Relationship"             type    oppath             default { "../.." }             range   { 0 1 }             parmtag { "opfilter" "!!DOP!!" }             parmtag { "oprelative" "." }         }     }      parm {         name    "suffixfirstgroup"         baseparm         label   "Add Suffix to First Group"         export  none     } ' $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry
opparm $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry  numobj ( 1 )
chblockbegin
chadd -t 0 0 $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry relnode
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'import toolutils\n\nnode = hou.node(".")\nsopsolver = hou.node("..")\n\n# Attempt to discover a constraint network that we\'re wired to.\nnodetypes = ["constraintnetwork"]\nfor nodetype in nodetypes:\n    network = toolutils.findOutputNodeOfBaseType(sopsolver, nodetype)\n    if network:\n        return node.relativePathTo(network)\n\nreturn "../.."' -l p $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry/relnode
chblockend
opparm -V 16.5.438 $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry objpath1 ( '`stamps("..", "DATAPATH", chsop("relnode") + ":Relationships/" + chs(chsop("relnode") + "/relname") + "/" + chs(chsop("relnode") + "/relationship/dataname") + "/Geometry")`' ) folder0 ( 1 1 ) relnode ( relnode )
opcolor -c 0.60000002384185791 0.40000000596046448 1 $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry
opexprlanguage -s hscript $_obj_Head_subnet1_dopnet1_sopsolver1_relationship_geometry
oporder -e dop_geometry impacts feedbacks relationship_geometry 
opcf ..
opset -p on $_obj_Head_subnet1_dopnet1_sopsolver1

opcf $arg1
opwire -n $_obj_Head_subnet1_dopnet1_sopgeo1 -0 $_obj_Head_subnet1_dopnet1_multisolver1
opwire -n $_obj_Head_subnet1_dopnet1_sopsolver1 -1 $_obj_Head_subnet1_dopnet1_multisolver1
opcf $arg1
opcf $arg1
opwire -n $_obj_Head_subnet1_dopnet1_emptyobject1 -0 $_obj_Head_subnet1_dopnet1_sopgeo1
opcf $arg1
opcf $_obj_Head_subnet1_dopnet1_sopsolver1
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_Head_subnet1_dopnet1_sopsolver1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_Head_subnet1_dopnet1_multisolver1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="gassubstep_nodes_script" label="gassubstep1 Nodes Script" icon="MISC_generic">
    <toolMenuContext name="network">
      <contextOpType>Dop/gassubstep</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('gasrepeatsolver'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_subnet1_dopnet1_gassubstep1 (Dop/gassubstep)
set _obj_geo1_subnet1_dopnet1_gassubstep1 = `run("opadd -e -n -v gassubstep gassubstep1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_subnet1_dopnet1_gassubstep1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_subnet1_dopnet1_gassubstep1
opexprlanguage -s hscript $_obj_geo1_subnet1_dopnet1_gassubstep1
opset -p on $_obj_geo1_subnet1_dopnet1_gassubstep1
opcf $arg1

# Node $_obj_geo1_subnet1_dopnet1_geometrywrangle1 (Dop/geometrywrangle)
set _obj_geo1_subnet1_dopnet1_geometrywrangle1 = `run("opadd -e -n -v geometrywrangle geometrywrangle1")`
oplocate -x `$arg2 + 1.2541000610683113` -y `$arg3 + 2.037900024652481` $_obj_geo1_subnet1_dopnet1_geometrywrangle1
opparm $_obj_geo1_subnet1_dopnet1_geometrywrangle1  bindings ( 0 ) bindfield_num ( 0 ) groupbindings ( 0 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_subnet1_dopnet1_geometrywrangle1
opexprlanguage -s hscript $_obj_geo1_subnet1_dopnet1_geometrywrangle1
opuserdata -n '___Version___' -v '' $_obj_geo1_subnet1_dopnet1_geometrywrangle1
opset -p on $_obj_geo1_subnet1_dopnet1_geometrywrangle1
opcf $arg1

# Node $_obj_geo1_subnet1_dopnet1_emptyobject1 (Dop/emptyobject)
set _obj_geo1_subnet1_dopnet1_emptyobject1 = `run("opadd -e -n -v emptyobject emptyobject1")`
oplocate -x `$arg2 + -1.2012500286102294` -y `$arg3 + 2.0031000239308923` $_obj_geo1_subnet1_dopnet1_emptyobject1
chblockbegin
chadd -t 0 0 $_obj_geo1_subnet1_dopnet1_emptyobject1 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$ST == 0' $_obj_geo1_subnet1_dopnet1_emptyobject1/activation
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_subnet1_dopnet1_emptyobject1
opexprlanguage -s hscript $_obj_geo1_subnet1_dopnet1_emptyobject1
opuserdata -n '___Version___' -v '16.5.439' $_obj_geo1_subnet1_dopnet1_emptyobject1
opset -p on $_obj_geo1_subnet1_dopnet1_emptyobject1
opcf $arg1

# Node $_obj_geo1_subnet1_dopnet1_sopgeo1 (Dop/sopgeo)
set _obj_geo1_subnet1_dopnet1_sopgeo1 = `run("opadd -e -n -v sopgeo sopgeo1")`
oplocate -x `$arg2 + -1.2` -y `$arg3 + 1.0000000119209287` $_obj_geo1_subnet1_dopnet1_sopgeo1
opparm $_obj_geo1_subnet1_dopnet1_sopgeo1  numstamps ( 0 )
chblockbegin
chadd -t 0 0 $_obj_geo1_subnet1_dopnet1_sopgeo1 time
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$T' $_obj_geo1_subnet1_dopnet1_sopgeo1/time
chadd -t 0 0 $_obj_geo1_subnet1_dopnet1_sopgeo1 transformtime
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$T' $_obj_geo1_subnet1_dopnet1_sopgeo1/transformtime
chadd -t 0 0 $_obj_geo1_subnet1_dopnet1_sopgeo1 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_geo1_subnet1_dopnet1_sopgeo1/activation
chblockend
opparm -V 16.5.439 $_obj_geo1_subnet1_dopnet1_sopgeo1 soppath ( '`dopcontextgeo(".", 0)`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_subnet1_dopnet1_sopgeo1
opexprlanguage -s hscript $_obj_geo1_subnet1_dopnet1_sopgeo1
opuserdata -n '___Version___' -v '16.5.439' $_obj_geo1_subnet1_dopnet1_sopgeo1
opset -p on $_obj_geo1_subnet1_dopnet1_sopgeo1
opcf $arg1

# Node $_obj_geo1_subnet1_dopnet1_gasrepeatsolver1 (Dop/gasrepeatsolver)
set _obj_geo1_subnet1_dopnet1_gasrepeatsolver1 = `run("opadd -e -n -v gasrepeatsolver gasrepeatsolver1")`
oplocate -x `$arg2 + 1.2571000576019287` -y `$arg3 + 1.0000000119209287` $_obj_geo1_subnet1_dopnet1_gasrepeatsolver1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_subnet1_dopnet1_gasrepeatsolver1
opexprlanguage -s hscript $_obj_geo1_subnet1_dopnet1_gasrepeatsolver1
opset -p on $_obj_geo1_subnet1_dopnet1_gasrepeatsolver1

opcf $arg1
opwire -n $_obj_geo1_subnet1_dopnet1_sopgeo1 -0 $_obj_geo1_subnet1_dopnet1_gassubstep1
opwire -n $_obj_geo1_subnet1_dopnet1_gasrepeatsolver1 -1 $_obj_geo1_subnet1_dopnet1_gassubstep1
opcf $arg1
opcf $arg1
opcf $arg1
opwire -n $_obj_geo1_subnet1_dopnet1_emptyobject1 -0 $_obj_geo1_subnet1_dopnet1_sopgeo1
opcf $arg1
opwire -n $_obj_geo1_subnet1_dopnet1_geometrywrangle1 -0 $_obj_geo1_subnet1_dopnet1_gasrepeatsolver1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_subnet1_dopnet1_gasrepeatsolver1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_subnet1_dopnet1_gassubstep1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="selectsamenodes" label="Select Same Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def select(node):
    if node.type() == type:
        node.setSelected(1)

selectedNodes = hou.selectedNodes()
sibling = selectedNodes[0].parent().children()

for selectedNode in selectedNodes:
    type = selectedNode.type()
    map(select, sibling)
]]></script>
  </tool>

  <tool name="filecache" label="File Cache" icon="PLASMA_App">
    <script scriptType="python"><![CDATA['''
Houdiniå°èæ¬:æåfilecacheèç¹å°/outä¸
ææ¶åä¸æ¸¸å¤§æ¹äºï¼éè¦æ ¹æ®ä¾èµå³ç³»æfilecacheä»¬ä¾æ¬¡è¾åºä¸éï¼filecacheå¤äºä¹åä¾æ¬¡ç¹ä¸æ¯å¾æ¹ä¾¿ï¼æä»¥æäºè¿ä¹ä¸ªå°èæ¬ã

ä½¿ç¨æ¹æ³

å°èæ¬å­ä¸ºtoolï¼å¯ä»¥æ¾å¨shelfä¸ï¼éæ©ç»æçèç¹ï¼ç¹å»æ­¤toolå³å¯å¨/outä¸çæææç»æèç¹ä¾èµçfilecache

ç®åå¹¶ä¿çä¾èµå³ç³»
ä¿çåèç¹é¢è²
'''

FC_COLOR = (0, 0.533, 0)


class Chain(object):
    def __init__(self, node):
        self.node = node
        self.inputs = []
        # if self.isFC():
        #    node.setColor(hou.Color(FC_COLOR))

    def ropName(self):
        return self.node.name() + '__CHAIN'

    def isFC(self):
        return self.node.type().name() == 'filecache'


def directUpstreamFC(node):
    FCs = []
    for i in node.inputs():
        if i.type().name() == 'filecache':
            FCs.append(i)
        else:
            FCs.extend(directUpstreamFC(i))
    return FCs


def toChain(node):
    chain = Chain(node)
    chain.inputs = [toChain(i) for i in directUpstreamFC(node)]
    return chain


def toRop(chain, rop_parent):
    r = rop_parent.node(chain.ropName())
    if not r:
        # take the case that first selected node is not filecache into consideration
        r = rop_parent.createNode('fetch' if chain.isFC() else 'merge')
        r.setName(chain.ropName())
    else:
        for i in range(len(r.inputs())):
            r.setInput(i, None)
    r.setColor(chain.node.color())
    if chain.isFC():
        r.parm('source').set(chain.node.path() + '/render')

    for i, input_rop in enumerate([toRop(i, rop_parent) for i in chain.inputs]):
        r.setInput(i, input_rop)
    r.moveToGoodPosition()
    return r


sel = hou.selectedNodes()
if not sel:
    pass
else:
    for node in sel:
        toRop(toChain(node), hou.node('/out'))]]></script>
  </tool>

  <tool name="extract lock nodes" label="Extract Lock Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def foreverychildren(node):
    nodetype = node.type()
    if nodetype.name() == 'null' and node.isGenericFlagSet(hou.nodeFlag.Lock):
        filepath = ''.join(['/', node.parent().name(), '.', node.name(), '.bgeo'])
        filepath_abs = hou.hscriptExpression("$HIP") + filepath
        filepath_rel = "$HIP" + filepath
        #print filepath
        node.geometry().saveToFile(filepath_abs)
        newnode = node.changeNodeType(new_node_type='file', keep_name=False, keep_parms=False, keep_network_contents=True, force_change_on_node_type_match=True)
        newnode.setParms({"file": filepath_rel})
        newnode.setGenericFlag(hou.nodeFlag.Lock, 0)
    elif node.isNetwork() and nodetype.category().name() == 'Sop' and not node.isLockedHDA():
        for child in node.children():
            foreverychildren(child)

map(foreverychildren, hou.selectedNodes())
]]></script>
  </tool>

  <tool name="refresh all file SOP" label="Refresh file SOP" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def foreverychildren(node):
    nodetype = node.type()
    if nodetype.name() == 'file' and bool(node.inputs()[0]) and node.evalParm("filemode") == 1:
        node.setParms({"filemode": 'write'})
        node.cook()
        node.setParms({"filemode": 'read'})
    elif node.isNetwork() and nodetype.category().name() == 'Sop' and not node.isLockedHDA():
        for child in node.children():
            foreverychildren(child)

map(foreverychildren, hou.selectedNodes())
]]></script>
  </tool>

  <tool name="lock all hda" label="Lock All HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def isUnlockedAsset(__node):
    return not __node.isLockedHDA() and __node.type().definition() is not None

def lock(node):
    nodetype = node.type()
    if isUnlockedAsset(node) and not HFS in nodetype.definition().libraryFilePath():
        node.matchCurrentDefinition()

HFS = hou.expandString('$HFS')

map(lock, hou.selectedNodes()[0].parent().allSubChildren())
]]></script>
  </tool>

  <tool name="unlock all HDA" label="Unlock All HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def unlock(node):
    nodetype = node.type()
    if node.isLockedHDA() and not HFS in nodetype.definition().libraryFilePath():
        node.allowEditingOfContents()

HFS = hou.expandString('$HFS')

map(unlock, list(hou.selectedNodes()[0].parent().allSubChildren()))
]]></script>
  </tool>

  <tool name="is locked HDA" label="is Locked HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
HFS = hou.expandString('$HFS')
selectedNodes = hou.selectedNodes()
#sibling = selectedNodes[0].parent().children()
for node in selectedNodes:
    #for child in sibling:
        nodetype = node.type()
        if not node.isLockedHDA() or HFS in nodetype.definition().libraryFilePath():
            node.setSelected(0)

# and nodetype.sourcePath() != 'Internal'
]]></script>
  </tool>

  <tool name="lock all hda0" label="Lock All HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def saveUnlockedNodes(node, nodetype):
    '''Look through all the nodes in the file for unlocked digital asset
       instances and save and lock them.'''
    if nodetype.definition() is not None and not node.matchesCurrentDefinition():
        nodetype.definition().updateFromNode(node)
        node.matchCurrentDefinition()

def foreverychildren(node):
    nodetype = node.type()
    saveUnlockedNodes(node, nodetype)
    if node.isNetwork() and nodetype.category().name() == 'Sop' and not node.isLockedHDA():
        for child in node.children():
            foreverychildren(child)

map(foreverychildren, hou.selectedNodes())
]]></script>
  </tool>

  <tool name="lock select hda" label="Lock Select HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def lock(node):
    node.matchCurrentDefinition()

map(lock, hou.selectedNodes())
]]></script>
  </tool>

  <tool name="editable node" label="Editable Node" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
print hou.nodenode()[0].isLockedHDA()

def isEditableLockedHDA(node):
    if node.isLockedHDA():
        for child in node.allSubChildren():
            if child.isEditable():
                return 1
    return 0

def unselectEditableNode(node):
    if not isEditableLockedHDA(node):
        node.setSelected(0)

map(unselectEditableNode, hou.selectedNodes())
hou.selectedItems()]]></script>
  </tool>

  <tool name="MMD_bridge" label="MMD Bridge" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import os
import sys

class Mtl():
    def __init__(self):
        self.name = ""    
        self.textureMap = ""
        self.alphaMap = ""
        self.diffuse = [0.7, 0.7, 0.7]
        self.specular = [0.0, 0.0, 0.0]
        self.ambient = [0.0, 0.0, 0.0]
        self.trans = 1.0
        self.power = 0.0
        self.lum = 1
        self.isAccessory = False

def import_mtl(path, result):
    
    current = None
    
    mtl = open(path, 'r')
    for line in mtl.readlines():
        words = line.split()
        if len(words) < 2:
            continue
        if "newmtl" in words[0]:
            # save previous mtl
            if current != None and current.name != "":
                result[current.name] = current
            # new mtl
            current = Mtl()
            current.name = str(words[1])
        if "Ka" == words[0]:
            current.ambient[0] = float(words[1])
            current.ambient[1] = float(words[2])
            current.ambient[2] = float(words[3])
        elif "Kd" == words[0]:
            current.diffuse[0] = float(words[1])
            current.diffuse[1] = float(words[2])
            current.diffuse[2] = float(words[3])
        elif "Ks" == words[0]:
            current.specular[0] = float(words[1])
            current.specular[1] = float(words[2])
            current.specular[2] = float(words[3])
        elif "Ns" == words[0]:
            current.power = float(words[1])
        elif "d" == words[0]:
            current.trans = float(words[1])
        elif "map_Kd" == words[0]:
            current.textureMap = line[line.find(words[1]):line.find(".png")+4]
        elif "map_d" == words[0]:
            current.alphaMap = line[line.find(words[1]):line.find(".png")+4]
        elif "#" == words[0]:
            if words[1] == "is_accessory":
                current.isAccessory = True

    if current != None and current.name != "":
        result[current.name] = current

    mtl.close()

def main():
    directory = hou.ui.selectFile(\
        title="Select .abc directory",\
        file_type=hou.fileType.Directory,\
        chooser_mode=hou.fileChooserMode.Read)

    if len(directory) <= 0:
        return

    abc = directory

    if not os.path.isdir(abc):
        return
    
    files = os.listdir(abc)

    if len(files) <= 0:
        return

    # find first mtl
    mtl = ""
    for file in files:
        root, ext = os.path.splitext(file)
        if ext == ".mtl":
            mtl = os.path.join(abc, file)
            break

    if mtl == "":
        return
        
    if len(hou.node('/obj').glob('alembicarchive*')) == 0:
        return

    mtlDict = {}
    import_mtl(mtl, mtlDict)

    shop = hou.node('/obj').glob('alembicarchive*')[0].createNode('shopnet', 'abcSHOP')
    shop.moveToGoodPosition()

    for obj in hou.node('/obj').children():
        for xform in obj.children():
            if not xform.type().name() == 'alembicxform':
                continue
            for geometry in xform.children():
                if not geometry.type().name() == 'geo':
                    continue
                materialName = xform.name().replace('material_', '')
                materialName = materialName.replace('xform', 'material')
                if materialName in mtlDict.keys():
                    mtlData = mtlDict[materialName]

                    # get clay material from gallary
                    entries = hou.galleries.galleryEntries('clay')
                    if len(entries) <= 0:
                        continue
                    clay = entries[0]
                    # create shop and copy clay to geometry's shop
                    mat = clay.createChildNode(shop)
                    mat.setName(materialName)

                    # setting
                    # assign texture
                    if len(mtlData.textureMap) > 0:
                        texturePath = os.path.join(abc, mtlData.textureMap)
                        root, ext = os.path.splitext(texturePath)
                        if ext == '.bmp' or ext == '.tga':
                            searchPath = root + '.png'
                            if os.path.exists(searchPath):
                                texturePath = searchPath
                        mat.parm('diff_colorUseTexture').set(True)
                        mat.parm('diff_colorTexture').set(texturePath)
                        mat.parm('ogl_tex1').set(texturePath)
                    else:
                        if mtlData.isAccessory:
                            mat.parm('diff_colorr').set(mtlData.diffuse[0] + 0.5 * mtlData.ambient[0])
                            mat.parm('diff_colorg').set(mtlData.diffuse[1] + 0.5 * mtlData.ambient[1])
                            mat.parm('diff_colorb').set(mtlData.diffuse[2] + 0.5 * mtlData.ambient[2])
                            mat.parm('ogl_diffr').set(mtlData.diffuse[0] + 0.5 * mtlData.ambient[0])
                            mat.parm('ogl_diffg').set(mtlData.diffuse[1] + 0.5 * mtlData.ambient[1])
                            mat.parm('ogl_diffb').set(mtlData.diffuse[2] + 0.5 * mtlData.ambient[2])
                        else:
                            mat.parm('diff_colorr').set(mtlData.diffuse[0])
                            mat.parm('diff_colorg').set(mtlData.diffuse[1])
                            mat.parm('diff_colorb').set(mtlData.diffuse[2])
                            mat.parm('ogl_diffr').set(mtlData.diffuse[0])
                            mat.parm('ogl_diffg').set(mtlData.diffuse[1])
                            mat.parm('ogl_diffb').set(mtlData.diffuse[2])

                    mat.parm('ogl_specr').set(mtlData.specular[0])
                    mat.parm('ogl_specg').set(mtlData.specular[1])
                    mat.parm('ogl_specb').set(mtlData.specular[2])
                    mat.parm('ogl_ambr').set(mtlData.ambient[0])
                    mat.parm('ogl_ambg').set(mtlData.ambient[1])
                    mat.parm('ogl_ambb').set(mtlData.ambient[2])

                    isUseTextureAlpha = mtlData.trans < 0.999
                    if isUseTextureAlpha:
                        mat.parm('ogl_cutout').set(isUseTextureAlpha)
#                    mat.parm('ogl_alpha').set(mtlData.trans)

                    geometry.parm('shop_materialpath').set(geometry.relativePathTo(mat))

main()
]]></script>
  </tool>

  <tool name="tool_1" label="Create ROP TOP for File Cache" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
import nodesearch

def findTopNet():
    #find top network, create one if not exists
    
    objnet = hou.node("/obj")
    currentnet = hou.node("../")
    
    matchnodes = nodesearch.NodeType("topnet").nodes
    
    if (len(matchnodes(currentnet)) != 0):
        topnet = matchnodes(currentnet)[0]
    elif (len(matchnodes(objnet)) != 0):
        topnet = matchnodes(objnet)[0]
    else:
        topnet = objnet.createNode("topnet")
        topnet.moveToGoodPosition()
    return topnet


def createTopRop():
    me = hou.pwd()
    topnet = findTopNet()
    
    georop = topnet.createNode("ropgeometry")
    georop.moveToGoodPosition()
    georop.setName(me.name(), 1)
    georop.setParms({"soppath": "`opinputpath(\"" + me.path() + "\",0)`"})
    
    relpath = georop.relativePathTo(me)
    
    georop.setParms({"sopoutput": '`chs("' + relpath + '/file")'})



]]></script>
  </tool>

  <tool name="extract_all_sub" label="Extract All Sub" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[
import toolutils
import soptoolutils

'''
def searchSubNode(node):
    if node.children()[0]:
    if(node.type() == hou.nodeType(hou.sopNodeTypeCategory(), "geo")):
    searchSubNode(node)
'''

scene_viewer = toolutils.sceneViewer()
container = soptoolutils.createSopNodeContainer(scene_viewer, "extract_object1")
object_mergeSOP = container.createNode('object_merge')

object_mergeSOP.parm("xformtype").set(1)

relativePath = []
for selectedNode in hou.selectedNodes():
    if(selectedNode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo")):
        relativePath.append(object_mergeSOP.relativePathTo(selectedNode))
    else:
        for subnode in selectedNode.allSubChildren():
            if(subnode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo")):
                relativePath.append(object_mergeSOP.relativePathTo(subnode))


object_mergeSOP.parm("objpath1").set(' '.join(relativePath))


'''
nummerge = 0
for selectedNode in hou.selectedNodes():
    if(selectedNode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo")):
        nummerge += 1
        relativePath = object_mergeSOP.relativePathTo(selectedNode)
        object_mergeSOP.parm("objpath" + str(nummerge)).set(relativePath)
    else:
        for subnode in selectedNode.allSubChildren():
            if(subnode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo")):
                nummerge += 1
                relativePath = object_mergeSOP.relativePathTo(subnode)
                object_mergeSOP.parm("objpath" + str(nummerge)).set(relativePath)

''']]></script>
  </tool>

  <tool name="tool_3" label="New Tool" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
for subnode in hou.selectedNodes():
    if subnode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo"):
        if subnode.evalParm('sx') * subnode.evalParm('sy') * subnode.evalParm('sz') < 0:
            displayNode = subnode.displayNode()
            reverse_sop = subnode.createNode('reverse')
            reverse_sop.setNextInput(displayNode)
            reverse_sop.moveToGoodPosition(True, False, True, True)
            reverse_sop.setDisplayFlag(True)
            reverse_sop.setRenderFlag(True)
            reverse_sop.setHighlightFlag(True)
            reverse_sop.setCurrent(True, True)
]]></script>
  </tool>

  <tool name="updatemode" label="Update Mode" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
if hou.ui.updateMode() == hou.updateMode.AutoUpdate:
    hou.ui.setUpdateMode(hou.updateMode.Manual)
else:
    hou.ui.setUpdateMode(hou.updateMode.AutoUpdate)
]]></script>
  </tool>

  <tool name="setdesktop_to_169_tech" label="Set Desktop to 169 Tech" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
hou.ui.desktop('169_tech').setAsCurrent()
]]></script>
  </tool>
</shelfDocument>
