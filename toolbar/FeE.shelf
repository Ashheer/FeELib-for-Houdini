<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="fee" label="FeE">
    <memberTool name="create new output node"/>
    <memberTool name="multisolver_nodes_script"/>
    <memberTool name="gassubstep_nodes_script"/>
    <memberTool name="compNode"/>
    <memberTool name="selectsamenodes"/>
    <memberTool name="filecache"/>
    <memberTool name="extract lock nodes"/>
    <memberTool name="refresh all file SOP"/>
    <memberTool name="is locked HDA"/>
    <memberTool name="lock all hda"/>
    <memberTool name="unlock all HDA"/>
    <memberTool name="lock all hda0"/>
    <memberTool name="lock select hda"/>
    <memberTool name="editable node"/>
    <memberTool name="tool_1"/>
    <memberTool name="extract_all_sub"/>
    <memberTool name="updatemode"/>
    <memberTool name="setdesktop_to_169_tech"/>
    <memberTool name="tool_4"/>
    <memberTool name="detailwrangle"/>
  </toolshelf>

  <tool name="create new output node" label="create new output node" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for node in hou.selectedNodes():
    OUTNode = node.createOutputNode('output', 'OUT_' + node.parent().name())

    numOUTNodes = -1
    for child in node.parent().children():
        if child.type() == OUTNode.type():
            numOUTNodes += 1
    OUTNode.setParms({"outputidx": numOUTNodes})

    # æä½Ctrlé®ç¹å»
    if not kwargs["ctrlclick"]:
        OUTNode.setName("OUT%d" % (numOUTNodes + 1))

    pos = node.position()
    OUTNode.setPosition([pos[0], pos[1] - 1])
    OUTNode.setColor(hou.Color((1, 0, 1)))

    if node.isDisplayFlagSet() == 1:
        OUTNode.setDisplayFlag(1)
    if node.isRenderFlagSet() == 1:
        OUTNode.setRenderFlag(1)
]]></script>
  </tool>

  <tool name="compNode" label="compNode" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
from compNodes import gui
gui.main()
]]></script>
  </tool>

  <tool name="selectsamenodes" label="Select Same Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def select(node):
    if node.type() == type:
        node.setSelected(1)

selectedNodes = hou.selectedNodes()
sibling = selectedNodes[0].parent().children()

for selectedNode in selectedNodes:
    type = selectedNode.type()
    map(select, sibling)
]]></script>
  </tool>

  <tool name="filecache" label="File Cache" icon="PLASMA_App">
    <script scriptType="python"><![CDATA['''
Houdiniå°èæ¬:æåfilecacheèç¹å°/outä¸
ææ¶åä¸æ¸¸å¤§æ¹äºï¼éè¦æ ¹æ®ä¾èµå³ç³»æfilecacheä»¬ä¾æ¬¡è¾åºä¸éï¼filecacheå¤äºä¹åä¾æ¬¡ç¹ä¸æ¯å¾æ¹ä¾¿ï¼æä»¥æäºè¿ä¹ä¸ªå°èæ¬ã

ä½¿ç¨æ¹æ³

å°èæ¬å­ä¸ºtoolï¼å¯ä»¥æ¾å¨shelfä¸ï¼éæ©ç»æçèç¹ï¼ç¹å»æ­¤toolå³å¯å¨/outä¸çæææç»æèç¹ä¾èµçfilecache

ç®åå¹¶ä¿çä¾èµå³ç³»
ä¿çåèç¹é¢è²
'''

FC_COLOR = (0, 0.533, 0)


class Chain(object):
    def __init__(self, node):
        self.node = node
        self.inputs = []
        # if self.isFC():
        #    node.setColor(hou.Color(FC_COLOR))

    def ropName(self):
        return self.node.name() + '__CHAIN'

    def isFC(self):
        return self.node.type().name() == 'filecache'


def directUpstreamFC(node):
    FCs = []
    for i in node.inputs():
        if i.type().name() == 'filecache':
            FCs.append(i)
        else:
            FCs.extend(directUpstreamFC(i))
    return FCs


def toChain(node):
    chain = Chain(node)
    chain.inputs = [toChain(i) for i in directUpstreamFC(node)]
    return chain


def toRop(chain, rop_parent):
    r = rop_parent.node(chain.ropName())
    if not r:
        # take the case that first selected node is not filecache into consideration
        r = rop_parent.createNode('fetch' if chain.isFC() else 'merge')
        r.setName(chain.ropName())
    else:
        for i in range(len(r.inputs())):
            r.setInput(i, None)
    r.setColor(chain.node.color())
    if chain.isFC():
        r.parm('source').set(chain.node.path() + '/render')

    for i, input_rop in enumerate([toRop(i, rop_parent) for i in chain.inputs]):
        r.setInput(i, input_rop)
    r.moveToGoodPosition()
    return r


sel = hou.selectedNodes()
if not sel:
    pass
else:
    for node in sel:
        toRop(toChain(node), hou.node('/out'))]]></script>
  </tool>

  <tool name="extract lock nodes" label="Extract Lock Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def foreverychildren(node):
    nodetype = node.type()
    if nodetype.name() == 'null' and node.isGenericFlagSet(hou.nodeFlag.Lock):
        filepath = ''.join(['/', node.parent().name(), '.', node.name(), '.bgeo'])
        filepath_abs = hou.hscriptExpression("$HIP") + filepath
        filepath_rel = "$HIP" + filepath
        #print filepath
        node.geometry().saveToFile(filepath_abs)
        newnode = node.changeNodeType(new_node_type='file', keep_name=False, keep_parms=False, keep_network_contents=True, force_change_on_node_type_match=True)
        newnode.setParms({"file": filepath_rel})
        newnode.setGenericFlag(hou.nodeFlag.Lock, 0)
    elif node.isNetwork() and nodetype.category().name() == 'Sop' and not node.isLockedHDA():
        for child in node.children():
            foreverychildren(child)

map(foreverychildren, hou.selectedNodes())
]]></script>
  </tool>

  <tool name="refresh all file SOP" label="Refresh file SOP" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def foreverychildren(node):
    nodetype = node.type()
    if nodetype.name() == 'file' and bool(node.inputs()[0]) and node.evalParm("filemode") == 1:
        node.setParms({"filemode": 'write'})
        node.cook()
        node.setParms({"filemode": 'read'})
    elif node.isNetwork() and nodetype.category().name() == 'Sop' and not node.isLockedHDA():
        for child in node.children():
            foreverychildren(child)

map(foreverychildren, hou.selectedNodes())
]]></script>
  </tool>

  <tool name="lock all hda" label="Lock All HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def isUnlockedAsset(__node):
    return not __node.isLockedHDA() and __node.type().definition() is not None

def lock(node):
    nodetype = node.type()
    if isUnlockedAsset(node) and not HFS in nodetype.definition().libraryFilePath():
        node.matchCurrentDefinition()

HFS = hou.expandString('$HFS')

map(lock, hou.selectedNodes()[0].parent().allSubChildren())
]]></script>
  </tool>

  <tool name="unlock all HDA" label="Unlock All HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def unlock(node):
    nodetype = node.type()
    if node.isLockedHDA() and not HFS in nodetype.definition().libraryFilePath():
        node.allowEditingOfContents()

HFS = hou.expandString('$HFS')

map(unlock, list(hou.selectedNodes()[0].parent().allSubChildren()))
]]></script>
  </tool>

  <tool name="is locked HDA" label="is Locked HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
HFS = hou.expandString('$HFS')
selectedNodes = hou.selectedNodes()
#sibling = selectedNodes[0].parent().children()
for node in selectedNodes:
    #for child in sibling:
        nodetype = node.type()
        if not node.isLockedHDA() or HFS in nodetype.definition().libraryFilePath():
            node.setSelected(0)

# and nodetype.sourcePath() != 'Internal'
]]></script>
  </tool>

  <tool name="lock all hda0" label="Lock All HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def saveUnlockedNodes(node, nodetype):
    '''Look through all the nodes in the file for unlocked digital asset
       instances and save and lock them.'''
    if nodetype.definition() is not None and not node.matchesCurrentDefinition():
        nodetype.definition().updateFromNode(node)
        node.matchCurrentDefinition()

def foreverychildren(node):
    nodetype = node.type()
    saveUnlockedNodes(node, nodetype)
    if node.isNetwork() and nodetype.category().name() == 'Sop' and not node.isLockedHDA():
        for child in node.children():
            foreverychildren(child)

map(foreverychildren, hou.selectedNodes())
]]></script>
  </tool>

  <tool name="lock select hda" label="Lock Select HDA" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
def lock(node):
    node.matchCurrentDefinition()

map(lock, hou.selectedNodes())
]]></script>
  </tool>

  <tool name="editable node" label="Editable Node" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
print hou.nodenode()[0].isLockedHDA()

def isEditableLockedHDA(node):
    if node.isLockedHDA():
        for child in node.allSubChildren():
            if child.isEditable():
                return 1
    return 0

def unselectEditableNode(node):
    if not isEditableLockedHDA(node):
        node.setSelected(0)

map(unselectEditableNode, hou.selectedNodes())
hou.selectedItems()]]></script>
  </tool>

  <tool name="tool_1" label="Create ROP TOP for File Cache" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
import nodesearch

def findTopNet():
    #find top network, create one if not exists
    
    objnet = hou.node("/obj")
    currentnet = hou.node("../")
    
    matchnodes = nodesearch.NodeType("topnet").nodes
    
    if (len(matchnodes(currentnet)) != 0):
        topnet = matchnodes(currentnet)[0]
    elif (len(matchnodes(objnet)) != 0):
        topnet = matchnodes(objnet)[0]
    else:
        topnet = objnet.createNode("topnet")
        topnet.moveToGoodPosition()
    return topnet


def createTopRop():
    me = hou.pwd()
    topnet = findTopNet()
    
    georop = topnet.createNode("ropgeometry")
    georop.moveToGoodPosition()
    georop.setName(me.name(), 1)
    georop.setParms({"soppath": "`opinputpath(\"" + me.path() + "\",0)`"})
    
    relpath = georop.relativePathTo(me)
    
    georop.setParms({"sopoutput": '`chs("' + relpath + '/file")'})



]]></script>
  </tool>

  <tool name="extract_all_sub" label="Extract All Sub" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[
import toolutils
import soptoolutils

'''
def searchSubNode(node):
    if node.children()[0]:
    if(node.type() == hou.nodeType(hou.sopNodeTypeCategory(), "geo")):
    searchSubNode(node)
'''

scene_viewer = toolutils.sceneViewer()
container = soptoolutils.createSopNodeContainer(scene_viewer, "extract_object1")
object_mergeSOP = container.createNode('object_merge')

object_mergeSOP.parm("xformtype").set(1)

relativePath = []
for selectedNode in hou.selectedNodes():
    if(selectedNode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo")):
        relativePath.append(object_mergeSOP.relativePathTo(selectedNode))
    else:
        for subnode in selectedNode.allSubChildren():
            if(subnode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo")):
                relativePath.append(object_mergeSOP.relativePathTo(subnode))


object_mergeSOP.parm("objpath1").set(' '.join(relativePath))


'''
nummerge = 0
for selectedNode in hou.selectedNodes():
    if(selectedNode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo")):
        nummerge += 1
        relativePath = object_mergeSOP.relativePathTo(selectedNode)
        object_mergeSOP.parm("objpath" + str(nummerge)).set(relativePath)
    else:
        for subnode in selectedNode.allSubChildren():
            if(subnode.type() == hou.nodeType(hou.objNodeTypeCategory(), "geo")):
                nummerge += 1
                relativePath = object_mergeSOP.relativePathTo(subnode)
                object_mergeSOP.parm("objpath" + str(nummerge)).set(relativePath)

''']]></script>
  </tool>

  <tool name="updatemode" label="Update Mode" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
if hou.ui.updateMode() == hou.updateMode.AutoUpdate:
    hou.ui.setUpdateMode(hou.updateMode.Manual)
else:
    hou.ui.setUpdateMode(hou.updateMode.AutoUpdate)
]]></script>
  </tool>

  <tool name="setdesktop_to_169_tech" label="Set Desktop to 169 Tech" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
hou.ui.desktop('169_tech').setAsCurrent()
]]></script>
  </tool>
</shelfDocument>
